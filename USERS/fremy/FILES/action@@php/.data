<?php
include_once('ROOT/FUNCTIONS/initialize.php');

if ( !isset($_SESSION['currentPoll']) ) // bug Iza
{
	$_SESSION['currentPoll'] = unserialize($_SESSION['debugIza']);
}

( isset($_POST['do']) && !empty($_POST['do']) ) ? $_GET['do'] = $_POST['do'] : NULL;

switch( $_GET['do'] )
{
	case "poll_vote":			
		if ( isset($_SESSION['currentPoll']) ) // bug Iza
		{
			$question = $_SESSION['currentPoll']->getQuestion();
			$ar_propositions = $question->getPropositions();	 // On va chercher toutes les propositions
			
			foreach( $ar_propositions as $proposition )
			{
				( $_GET['idProposition'] == $proposition->getId() ) ? $quotation = 1 : $quotation = 0; // On check laquel est la bonne
				$ar_idProposition_quotation[] = array('idProposition'=>$proposition->getId(),'quotation'=>$quotation); // On cree le tableau qu'on enverra a la fonction vote
			}
			
			(isset($_SESSION['userIn'])) ? 	$user1 = $_SESSION['userIn'] : $user1 = NULL; // On check si il y a un userIn
			($_SESSION['MODE_ANONYME'] === true) ? $user1 = NULL : NULL; // On test le mode anonyme.
			$_SESSION['currentPoll']->vote($ar_idProposition_quotation, $user1); // Le vote ce fait ici

			$_SESSION['user']->addSond($_SESSION['currentPoll']);
			
			// On reprend le id du prochain sondage
			$_GET['sond_id'] = $_SESSION['user']->getNextPoll();

			$firstOpenPoll = false;
			$lien = C_LINKS_URL."/?page=poll&sond_id=".$_GET['sond_id']."&prev=".$_SESSION['currentPoll']->getId();
		}
		// Si il y a bug Iza, on retourne sur la page d'accueil
		else
		{
			$lien = C_LINKS_URL."/index.php";
		}
		print $lien;
		break;
		
	case "pollOFTD_vote":
		$question = $_SESSION['poftd']->getQuestion();
		$ar_propositions = $question->getPropositions();	
		
		foreach( $ar_propositions as $proposition )
		{
			( $_GET['idProposition'] == $proposition->getId() ) ? $quotation = 1 : $quotation = 0;
			$ar_idProposition_quotation[] = array('idProposition'=>$proposition->getId(),'quotation'=>$quotation); 	
		}
		
		if(isset($_SESSION['userIn']))
		{
			$userIn = $_SESSION['userIn'];
		}else
		{
			$userIn = NULL;
		}
		($_SESSION['MODE_ANONYME'] === true) ? $user1 = NULL : NULL; // On test le mode anonyme.
		
		if(isset($_SESSION['user']))
		{
			$_SESSION['user']->addSond($_SESSION['poftd']);
		}						
		$_SESSION['poftd']->vote($ar_idProposition_quotation, $userIn);
		
		$voted = 1;
		include("poftd.php");
				
		break;
		
	case "external_vote":
		$sond = new Sond();
		$sond->loadAttributes($_GET['sond_id']);
		$_SESSION['external_poll'] = new Poll($sond);
		$question = $_SESSION['external_poll']->getQuestion();
		$ar_propositions = $question->getPropositions();	
		foreach( $ar_propositions as $proposition )
		{
			( $_GET['idProposition'] == $proposition->getId() ) ? $quotation = 1 : $quotation = 0;
			$ar_idProposition_quotation[] = array('idProposition'=>$proposition->getId(),'quotation'=>$quotation); 	
		}
		
		if(isset($_SESSION['userIn']))
		{
			$userIn = $_SESSION['userIn'];
		}else
		{
			$userIn = NULL;
		}
		($_SESSION['MODE_ANONYME'] === true) ? $user1 = NULL : NULL; // On test le mode anonyme.
		
		if(isset($_SESSION['user']))
		{
			$_SESSION['user']->addSond($_SESSION['external_poll']);
		}						
		$_SESSION['external_poll']->vote($ar_idProposition_quotation, $userIn);
		
		$voted = 1;
		( $_SESSION['external_footer'][$_SESSION['external_poll']->getId()] == 1 ) ? $_GET['footer'] = 0 : $_GET['footer'] = 1;
		$_GET['sond_id'] = $_SESSION['external_poll']->getId();
		include("external.php");
				
		break;
		
		case "sp_vote":
			if ( !empty($_GET['idProposition']) )
			{
				$sond = new Sond();
				$sond->loadAttributes($_GET['sond_id']);
				$_SESSION['sp_poll'] = new Poll($sond);
				$question = $_SESSION['sp_poll']->getQuestion();
				$ar_propositions = $question->getPropositions();
				foreach( $ar_propositions as $proposition )
				{
					( $_GET['idProposition'] == $proposition->getId() ) ? $quotation = 1 : $quotation = 0;
					$ar_idProposition_quotation[] = array('idProposition'=>$proposition->getId(),'quotation'=>$quotation);
				}
			
				if(isset($_SESSION['userIn']))
				{
					$userIn = $_SESSION['userIn'];
				}else
				{
					$userIn = NULL;
				}
				($_SESSION['MODE_ANONYME'] === true) ? $user1 = NULL : NULL; // On test le mode anonyme.
			
				if(isset($_SESSION['user']))
				{
					$_SESSION['user']->addSond($_SESSION['sp_poll']);
				}
				$_SESSION['sp_poll']->vote($ar_idProposition_quotation, $userIn);
			
				$voted = 1;
				$_GET['sond_id'] = $_SESSION['sp_poll']->getId();
			}
			include("studentpuzzle_results.php");
		
			break;	
				
	case "qr_vote":
		$question = $_SESSION['qr_poll']->getQuestion();
		$ar_propositions = $question->getPropositions();	
		
		foreach( $ar_propositions as $proposition )
		{
			( $_GET['idProposition'] == $proposition->getId() ) ? $quotation = 1 : $quotation = 0;
			$ar_idProposition_quotation[] = array('idProposition'=>$proposition->getId(),'quotation'=>$quotation); 	
		}
		
		if(isset($_SESSION['userIn']))
		{
			$userIn = $_SESSION['userIn'];
		}else
		{
			$userIn = NULL;
		}
		($_SESSION['MODE_ANONYME'] === true) ? $user1 = NULL : NULL; // On test le mode anonyme.
		
		if(isset($_SESSION['user']))
		{
			$_SESSION['user']->addSond($_SESSION['qr_poll']);
		}
						
		$_SESSION['qr_poll']->vote($ar_idProposition_quotation, $userIn);
		
		$voted = 1;
		$_GET['sond_id'] = $_SESSION['qr_poll']->getId();
		$_GET['qr_user'] =  $_SESSION['qr_poll']->getAuthor();
		include("qualityrate.php");
				
		break;

	case "inscription":
		$eMail = $_GET['eMail'];
		$nickname = $_GET['nickname'];
		$pwd = $_GET['pwd'];
		$userIn = new UserIn();
		$userIn->preInscription($nickname, $eMail, $pwd);
		
		if ( isset($this) )
		{
			$TBS = $this;
		}
		else
		{
			include_once('TEMPLATE/tbs_class_php5.php');
			$TBS = new clsTinyButStrong;
		}
		
		$TBS->LoadTemplate('TEMPLATE/thanksForRegistering.htm');		
		$TBS->Show();
		break;
		
	case "testInscription":
		$eMail = $_GET['eMail'];
		$nickname = $_GET['nickname'];
		$result = UserIn::checkDataBase($nickname, $eMail);
		print $result;
		break;
		
	case "login":
		$nickname = $_GET['nickname'];
		$pwd = $_GET['pwd'];
		$remember = $_GET['remember'];
		( $remember == 1 ) ? $remember = true : $remember = false;
		if(isset($_SESSION['user']))
			$userIn = new UserIn($_SESSION['user'], true);
		else
			$userIn = new UserIn(NULL, true);
		$result = $userIn->connection($nickname, $pwd, $remember, true);
		//print hash("sha256",$pwd);
		//print $result;
		
		if(!$result)
		{
			print "false";
		}else
		{
			$_SESSION['userIn']->countComments();
			$_SESSION['userIn']->countSondaged();
			$_SESSION['userIn']->countFavourites();
			$_SESSION['userIn']->countCreated();
			print "true";
		}
		break;
		case "loginFace":
			echo "<div style='text-align:center;position:relative;top:3px;'><span style='color:rgb(200,200,200);font-style:italic;font-size:12px;'>Loading...</span></div>";
			$userFace = $facebook->getUser();
			try
			{
				// Proceed knowing you have a logged in user who's authenticated.
				$user_profile = $facebook->api('/me');
			}
			catch (FacebookApiException $e) {
				$userFace = null;
			}
			if (isset($user_profile))
			{
				//le type est connecter à facebook
				//$fql    =   "select name, hometown_location,album, sex, pic_square,pic from user where uid=" . $user_profile['id'];
				/*$param  =   array(
						'method'  => 'users.getinfo',
						'uids'    => $user_profile['id'],
						'fields'  => 'profile_url,email',
						'callback'=> ''
				);*/
				$user=$user_profile;
				$_SESSION['userFace']=$user;
				global $db;
				$str="Select * from arch_userin where eMail_eMail=?";
				$req=$db->prepare($str);
				$req->execute(array($user_profile['email']));
				$donnee=$req->fetch();
				if(!empty($donnee))
				{
					//On va confirmer la connexion facebook et updater l'avatar,le genre et l'annif si nécessaire.
					//echo $donnee['avatar']."<br/>";
					if($donnee['avatar']==NULL || $donnee['avatar']=='0')
					{
						$fql   = 	"  SELECT owner, pid, src_big FROM photo  WHERE aid IN (SELECT aid  FROM album WHERE name='Profile Pictures' AND owner IN (".$user_profile['id'].") ) LIMIT 0,1";
						$param  =   array(
								'method'    => 'fql.query',
								'query'     => $fql,
								'callback'  => ''
						);
						$userInf = $facebook->api($param);
						if($donnee['Facebook']=='0')
						{
							$str="UPDATE arch_userin SET Facebook='1' WHERE eMail_eMail=?";
							$req=$db->prepare($str);
							$req->execute(array($user_profile['email']));
						}
						$avatar=$userInf[0]['src_big'];	
						//$avatar="https://graph.facebook.com/".$user_profile['id']."/picture";
						$str="UPDATE arch_userin SET avatar=? WHERE eMail_eMail=?";
						$req=$db->prepare($str);
						$req->execute(array($avatar,$user_profile['email']));
					}
					if($donnee['birthdayDay']==NULL)
					{
						$strBirth="UPDATE arch_userin SET birthdayDay=?,birthdayMonth=?,birthdayYear=? WHERE eMail_eMail=?";
						if(empty($user['birthday']))
						{
							$fql   = 	"  SELECT birthday_date FROM user WHERE uid=".$user_profile['id'];
							$param  =   array(
									'method'    => 'fql.query',
									'query'     => $fql,
									'callback'  => ''
							);
							$userInf = $facebook->api($param);
							$user[]=$userInf;
							$birthday=$user[2]['birthday_date'];
						}
						else
						{
							$birthday=$user['birthday'];
						}
						$arrayBirthday=explode("/", $birthday);
						$day=$arrayBirthday[1];
						$month=$arrayBirthday[0];
						$year=$arrayBirthday[2];
						$req=$db->prepare($strBirth);
						$req->execute(array($day,$month,$year,$user_profile['email']));
					}
					if($donnee['gender']==NULL)
					{
						$str="UPDATE arch_userin SET gender=? WHERE eMail_eMail=?";
					
						$gender=$user_profile['gender'];
						if($gender=='male')
						{
							$gender='M';
						}
						else
						{
							$gender='F';
						}
					
						$req=$db->prepare($str);
						$req->execute(array($gender,$user_profile['email']));
					}
					$userIn = new UserIn(NULL, true);
					$userIn->connectionFace($user_profile['email']);
					//print hash("sha256",$pwd);
					//print $result;
					$_SESSION['userIn']->countComments();
					$_SESSION['userIn']->countSondaged();
					$_SESSION['userIn']->countFavourites();
					$_SESSION['userIn']->countCreated();
				}
				else
				{
					if(empty($user['birthday']))
					{
						$fql   = 	"  SELECT birthday, birthday_date FROM user WHERE uid=".$user_profile['id'];
						$param  =   array(
								'method'    => 'fql.query',
								'query'     => $fql,
								'callback'  => ''
						);
						$userInf = $facebook->api($param);
						$user[]=$userInf;
						$birthday=$user[2]['birthday_date'];
					}
					else
					{
						$birthday=$user['birthday'];
					}
					$arrayBirthday=explode("/", $birthday);
					//$birthday=mktime(0, 0, 0,$arrayBirthday[1],$arrayBirthday[0], $arrayBirthday[2]);
					$arrayBirthday=explode("/", $birthday);
					$day=$arrayBirthday[1];
					$month=$arrayBirthday[0];
					$year=$arrayBirthday[2];
					//echo $userInf[0]['src_big'];
					//print htmlspecialchars(print_r($user, true));
					//print "<br/>";
					
					$strEmail="INSERT INTO arch_email(eMail,numberActivity) VALUES (?,11)";
					$req=$db->prepare($strEmail);
					$req->execute(array($user_profile['email']));
					$str="INSERT INTO `arch_userin`(`nickname`, `pwd`, `eMail_eMail`, `archiPoint`, `archiMark`, `avatar`, `level`, `activationKey`, `country`, `country_alpha`, `area`, `city`, `latitude`, `longitude`, `datum`, `description`, `activic`, `activity_id`, `Facebook`, `gender`, `birthdayDay`, `birthdayMonth`, `birthdayYear`) VALUES (?,?,?,0,50,?,1,?,?,NULL,NULL,?,NULL,NULL,?,'Salut',0,11,'1',?,?,?,?)";
					$req=$db->prepare($str);
					$pwd= UserIn::getRandomPass();
					$activiation_key="fksqdfmqdksjfmqslkgjqmsgjqg";
					$location=explode(",", $user_profile['location']['name']);
					$country=trim($location[1]);
					$city=trim($location[0]);
					$gender=$user_profile['gender'];
					if($gender=='male')
					{
						$gender='M';
					}
					else
					{
						$gender='F';
					}
					//echo "ville + city : ".$country." , ".$city."</br>";
					$date=$user_profile['updated_time'];
					$avatar=$userInf[0]['src_big'];
					//$avatar="https://graph.facebook.com/".$user_profile['id']."/picture";
				//	echo "<br/> ".$user_profile['name']."<br/> ".$pwd."<br/>".$user_profile['email']." <br/> ".$avatar." <br/> ".$activiation_key." <br/> ".$country."<br/>".$city." <br/> ".$date." <br/> ".$gender." <br/> ".$day."<br/>  ".$month." <br/> ".$year."<br/>";
					$req->execute(array($user_profile['name'],$pwd,$user_profile['email'],$avatar,$activiation_key,$country,$city,$date,$gender,$day,$month,$year)) or die(print_r($db->errorInfo()));
					
					$userIn = new UserIn(NULL, true);
					$userIn->connectionFace($user_profile['email']);
					
					$_SESSION['userIn']->countComments();
					$_SESSION['userIn']->countSondaged();
					$_SESSION['userIn']->countFavourites();
					$_SESSION['userIn']->countCreated();
					//la on a rajouter quelqu'un
				}
			}
			?>
			<script>
				window.parent.location.href= "<?php echo C_LINKS_URL; ?>";				
			</script>
			<?php 
			break;
			
	case "thumbsUp":
		$_SESSION['user']->addThumbsUpDown($_GET['commentId']);
		print Comment::thumbsUp($_GET['commentId'],$_GET['value']);		
		break;
		
	case "thumbsDown":
		$_SESSION['user']->addThumbsUpDown($_GET['commentId']);
		print Comment::thumbsDown($_GET['commentId'],$_GET['value']);		
		break;
	
	case "signalComment":
		$_SESSION['user']->addFlagsComment($_GET['commentId']);
		Comment::flag($_GET['commentId']);	
		print $GLOBALS['DICTIONARY']['Poll']['commentFlagged'];		
		break;
		
	case "newComment":
		$_SESSION['currentPoll']->addComment($_SESSION['userIn'],sqlInput($_GET['statement']),NULL);
		print $GLOBALS['DICTIONARY']['Poll']['commentPosted'];		
		break;
		
	case "replyComment":
		$_SESSION['currentPoll']->addComment($_SESSION['userIn'],sqlInput($_GET['statement']),$_GET['target']);
		print $GLOBALS['DICTIONARY']['Poll']['commentReplied'];		
		break;
	
	case "loadMyPage":
		$_GET['userId'] = $_SESSION['userIn']->getId();
		include_once("myAccount.php");
		break;
		
	case "loadMyInfos":
		include_once("login.php");
		break;
		
	case "disconnect":
		addLog("action.php: disconnect");
		session_destroy();
		$expire = time() - 3600;
		setcookie("userIn","", $expire);
		setcookie("user","", $expire);
		//setcookie('id',"", $expire);
		//include_once("home.php");
		break;

	case "search":
		if(!empty($_GET['num']))
		{
			$numPage=$_GET['num'];
		}
		else
			$numPage=1;
		$string = sqlInput($_GET['q']);
		$msgSearch = str_replace("%activity%",$_GET['q'],$GLOBALS['DICTIONARY']['SearchEngine']['resultActivity']);
		$msgSearch = str_replace("%", " ", $msgSearch);
		$tab_retour = preg_split("/[\s%]+/",$string);
		/*print "<pre>";
		print_r($tab_retour);
		print "<pre/>";*/
		global $db;
		$showTri=1;
		$ar_sonds = array();
		
		$select = "SELECT sond.numVotes, sond.id, sond.userIn_nickname AS name, UNIX_TIMESTAMP( sond.datum ) AS date, SUM( tag.quotation ) AS quot, question.statement AS question ";
		$count = "SELECT COUNT(DISTINCT sond.id) as num ";
		
		$sql = "FROM arch_tags tag, arch_poll poll, arch_question question, arch_sond sond
		WHERE sond.id = poll.sond_id
		AND poll.question_id = question.question_id AND tag.sond_id = sond.id AND sond.status =  'visible' AND tag.statement IN (";
		$str="";
		foreach ($tab_retour as $test)
		{
			$test = encodeRawText($test);
			//$test = PaiceHuskStemmer($test, $_SESSION['user']->getLanguage());
			$str.='"'.$test.'",';
		}
		$str=trim($str,",");
		$sql.=$str.")";
		$count.=$sql;
		
		//print "<p>".$count."</p";
		
		$sql.=" GROUP BY sond.id";
		
		$req = $db->prepare($count);
		$req->execute(array());
		while($data = $req->fetch())
		{
			$numResultat=$data['num'];
		}
		
		//Partie NOMBRE DE PAGE
		$numPageNeeded=$numResultat/NBR_POLL_PAGE;
		if($numResultat%NBR_POLL_PAGE!=0)
		{
			$numPageNeeded++;
		}		
		$ar_pages = array();
		if(($numPage==1 || $numPage==2 || $numPage==3) && $numPageNeeded>=5)
		{
			for($i=1;$i<=5;$i++)
			{
				array_push($ar_pages,$i);
			}
		}
		else if(($numPage==1 || $numPage==2 || $numPage==3) && $numPageNeeded<5.0)
		{
			for($i=1;$i<=$numPageNeeded;$i++)
			{
				array_push($ar_pages,$i);
			}
		}
		else if($numPage>3 && ($numPageNeeded>=($numPage+2)))
		{
			for($i=($numPage-2);$i<=($numPage+2);$i++)
			{
				array_push($ar_pages,$i);
			}
		}
		else if($numPage>3)
		{
			for($i=($numPage-2);$i<=$numPageNeeded;$i++)
			{
				array_push($ar_pages,$i);
			}
		}
		//A continuer
		$num=16*($numPage-1);
		if(($num+16)>$numResultat)
		{
			$borneSup=$numResultat;
		}
		else
		{
			$borneSup=$num+16;
		}
		//Partie Tri
		/*foreach ($ar_sonds as $key => $row)
		{
			$col0[$key] = $row['id'];
			$col1[$key] = $row['quotation'];
			$col2[$key] = $row['datum'];
			$col3[$key] = $row['question'];
			$col4[$key] = $row['name'];
			$col5[$key] = $row['numVotes'];
		}*/
		/*print "<pre>";
		print_r($ar_sonds);
		print "</pre>";*/
		$select.=$sql;
		if(!empty($_GET["tri"]))
		{
			$tri=0;
			switch($_GET["tri"])
			{
				case date:
					$tri=1;
					$select.=" ORDER BY datum DESC";
					break;
				case votes:
					$tri=2;
					$select.=" ORDER BY numVotes DESC";
					break;
				case question:
					$tri=3;
					//Réecris ici car besoin de question
					$select.=" ORDER BY question ASC";
					break;
				case créateur:
					$tri=4;
					$select.=" ORDER BY name ASC";
					break;
					//a continuer
			}
		}
		else
		{
			//$tri=4;
			$select.=" ORDER BY quotation ASC";
		}
		$select.= " LIMIT ".$num.", 16";
		$req = $db->prepare($select);
		$req->execute(array());
		while($data = $req->fetch())
		{
			$ar_sonds[] = array('id'=>$data['id'],'quotation'=>$data['quot'],'datum'=>$data['date'],'question'=>strval($data['question']),'name'=>strval($data['name']),'numVotes'=>$data['numVotes']);
		}
		/*print "<pre>";
		print_r($ar_sonds);
		print "</pre>";*/
		//Partie Remplissage
		if(isset($ar_sonds) and $ar_sonds != NULL)
		{
			//$ar_sonds=array_slice($ar_sonds, $num, $borneSup);
			$numPollNeeded=($borneSup-$num);
			for($i = 0; $i < $numPollNeeded; $i++)
			{
				$temp = new Sond();
				if(isset($ar_sonds[$i]))
				{
					$temp->loadAttributes($ar_sonds[$i]['id']);	
					$ar_content[] = new Poll($temp);
					$msgBox = 0;	
					$msg = "";
					$searchBox=1;
				}else
				{
					break;
				}
			}
		}
		else
		{
			$ar_content = Poll::auxiliary(9);
			$msgBox = 1;
			$searchBox=0;
			$msg = $GLOBALS['DICTIONARY']['SearchEngine']['noResult'];
			$showTri=0;
		}
		$_SESSION['pagedSonds'] = $ar_sonds;
		
		unset($_SESSION['currentPoll']);
		if ( isset($this) )
		{
			$TBS = $this;
		}
		else
		{
			include_once('TEMPLATE/tbs_class_php5.php');
			$TBS = new clsTinyButStrong;
		}
		$next=$GLOBALS['DICTIONARY']['SearchEngine']['next'];
		$prev=$GLOBALS['DICTIONARY']['SearchEngine']['prec'];
		$msgTot = str_replace("%borneInf%",($num+1),$GLOBALS['DICTIONARY']['SearchEngine']['numResultsActivity']);
		$msgTot = str_replace("%borneSup%",$borneSup,$msgTot);
		$msgTot = str_replace("%numTot%",$numResultat,$msgTot);
		$ar_tri=array("d"=>$GLOBALS['DICTIONARY']['SearchEngine']['datum'],"v"=>$GLOBALS['DICTIONARY']['SearchEngine']['rate'],"a"=>$GLOBALS['DICTIONARY']['SearchEngine']['question'],"c"=>$GLOBALS['DICTIONARY']['SearchEngine']['autor']);
		$msgTri=$GLOBALS['DICTIONARY']['SearchEngine']['tri'];
		
		
		$TBS->LoadTemplate('TEMPLATE/home.htm');
		$TBS->MergeField('msgBox',$msgBox);
		$TBS->MergeField('msg',$msg);
		$TBS->MergeField('msgTri',$msgTri);
		
		$TBS->MergeField('type',2);
		$TBS->MergeField('showTri',$showTri);
		$TBS->MergeField('numTot',$numResultat);
		$TBS->MergeField('borneInf',$num+1);
		$TBS->MergeField('borneSup',$borneSup);
		
		$TBS->MergeField('id',"\"".$_GET['q']."\"");
		$TBS->MergeField('numPage',$numPage);
		$TBS->MergeField('pagePrec',$numPage-1);
		$TBS->MergeField('pageSuiv',$numPage+1);
		
		$TBS->MergeField('msgTot',$msgTot);
		
		$TBS->MergeField('typeTri',$tri);
		
		$TBS->MergeField('searchBox',$searchBox);
		$TBS->MergeField('msgSearch',$msgSearch);
		$TBS->MergeField('next',$next);
		$TBS->MergeField('prec',$prev);
		$TBS->MergeBlock('ar_tri','array',$ar_tri);
		$TBS->MergeBlock('ar_pages','array',$ar_pages);
		
		$TBS->MergeBlock('ar_content','array',$ar_content);
		
		$TBS->Show();
		
		break;
	
	case "showPage":
		$page = $_GET['page'];
		if($page == NULL)
			$page = 1;
		$next = 1;
		if($page*NBR_POLL_PAGE > count($_SESSION['pagedSonds']))
			$next = 0;
		for($i = ($page - 1)*NBR_POLL_PAGE; $i < $page*NBR_POLL_PAGE; $i++)
		{
		 	$temp = new Sond();
		 	if(isset($_SESSION['pagedSonds'][$i]))
		 	{
			 	$temp->loadAttributes($_SESSION['pagedSonds'][$i]);	
			 	$ar_content[] = new Poll($temp);
			 	$msgBox = 0;	
			 	$msg = "";
			 }else
			 {
				 break;
			 }
		}
		$numberSonds = count($ar_content);
		$numberInter = ceil($numberSonds/2 + 1);
		unset($_SESSION['currentPoll']);
		if ( isset($this) )
		{
			$TBS = $this;
		}
		else
		{
			include_once('TEMPLATE/tbs_class_php5.php');
			$TBS = new clsTinyButStrong;
		}
		
		$TBS->LoadTemplate('TEMPLATE/home.htm');
		$TBS->MergeField('msgBox',$msgBox);
		$TBS->MergeField('msg',$msg);
		$TBS->MergeField('numberInter',$numberInter);
		$TBS->MergeField('page',$page);
		$TBS->MergeField('next',$next);		
		$TBS->MergeBlock('ar_content','array',$ar_content);
		
		$TBS->Show();
		
		
		break;
	
	case "preSearch":
		$string = sqlInput($_GET['q']);
		$tab_retour = preg_split("/[\s%]+/",$string);
		global $db;
		$sql = 'SELECT distinct statement FROM '.$GLOBALS['MYSQL_TABLES']['Tags'].' WHERE statement like ? AND LENGTH( statement ) > 5 LIMIT 0,15';
		$sqlArray = array(encodeRawText(end($tab_retour))."%");
		$req = $db->prepare($sql);
		$req->execute($sqlArray);	
		$datas = $req->fetchAll();
		$string = "";
		if(sizeof($tab_retour) > 1) 
		{
			for($i=0; $i<sizeof($tab_retour)-1; $i++)
			{
				$string .= "%%".$tab_retour[$i];
			}
			$string = substr($string, 2);
		}
		$propositions = "";
		if($string == "")
		{
			foreach($datas as $data)
			{	
				$propositions .= "#".$data[0];
			}
			$propositions = substr($propositions, 1);
		}
		else
		{
			foreach($datas as $data)
			{	
				$propositions .= '#'.$string."%%".$data[0];
			}
			$propositions = substr($propositions, 1);
		}
		
		print $propositions;
		
		break;

	case "preSearchUserin":
		$string = sqlInput($_GET['q']);
		$tab_retour = preg_split("/[\s%]+/",$string);
		global $db;
		$sql = 'SELECT id,nickname, avatar, archiPoint, archiMark, facebook FROM '.$GLOBALS['MYSQL_TABLES']['UserIn'].' WHERE nickname like ? AND LENGTH( nickname ) > 3 LIMIT 0,15';
		$sqlArray = array(end($tab_retour)."%");
		$req = $db->prepare($sql);
		$req->execute($sqlArray);
		$datas = array();
		while ( $data = $req->fetch() )
		{
			$datas[] = array("id"=>$data['id'],"nickname"=>$data['nickname'],"avatar"=>new Picture($data['avatar'],"icon",$data['facebook']),"archiPoint"=>$data['archiPoint'],"archiMark"=>$data['archiMark']);
		}

		if ( isset($this) )	{ $TBS = $this; } else { include_once('TEMPLATE/tbs_class_php5.php'); $TBS = new clsTinyButStrong; }
		$TBS->LoadTemplate('TEMPLATE/presearch_userin.htm');
		$TBS->MergeBlock('userin',$datas);
		$TBS->Show();
		
		break;		
		
	case "add_favourite":
		$_SESSION['currentPoll']->addFavourite();
		print $GLOBALS['DICTIONARY']['Poll']['favouriteSaved'];
		break;
		
	case "signalPoll":
		$_SESSION['user']->addFlagsSond($_SESSION['currentPoll']->getId());
		$_SESSION['currentPoll']->flag();	
		print $GLOBALS['DICTIONARY']['Poll']['pollFlagged'];
		break;
		
	case "modifyUserInfo":
		$_GET['value'] = $_POST['value'];
		$_GET['type'] = $_POST['type'];
		switch ($_GET['type'])
		{
			case "password":
				$_SESSION['userIn']->save($_GET['value']);
				$feedback = $GLOBALS['DICTIONARY']['myAccount']['passwordUpdated'];
				break;
			case "description":
				$_SESSION['userIn']->setDescription(sqlInput($_GET['value']));
				$_SESSION['userIn']->save();
				$feedback = $GLOBALS['DICTIONARY']['myAccount']['descriptionUpdated'];
				break;
			case "activity":
				$_SESSION['userIn']->setActivity($_GET['value']);
				$_SESSION['userIn']->save();
				$feedback = $GLOBALS['DICTIONARY']['myAccount']['activityUpdated'];
				break;
			case "gender":
					$_SESSION['userIn']->updateGender($_GET['value']);
					//$feedback = $GLOBALS['DICTIONARY']['myAccount']['activityUpdated'];
					$feedback="gender updated";
					break;
			case "birthday":
				//print_r($_POST);
				//$feedback = $GLOBALS['DICTIONARY']['myAccount']['birthdayUpdated'];
				$day=$_GET['day']=$_POST['day'];
				$month=$_GET['month']=$_POST['month'];
				$year=$_GET['year']=$_POST['year'];
				$_SESSION['userIn']->updateAge($day,$month,$year);
				$feedback="brithday updated";
				break;
		}
		print $feedback;
		break;
		
	case "sendNewPassword":
		$msg = UserIn::sendPassword($_GET['pwd']);
		if ( $msg == "error" )
		{
			$msg = $GLOBALS['DICTIONARY']['Password']['errorNotFound'];
			$error = 1;
			include("feedbackPassword.php");
		}
		else
		{
			$error = 0;
			include("feedbackPassword.php");
		}
		break;
		
	case "setSamplePic":
		$link = str_replace("_icon_","",$_GET['icon']);
		$name = str_replace($GLOBALS['DIRNAMES']['Sonds'],"",$link);
		$picture = new Picture();
		$picture->setName($name);
		$_SESSION['currentPoll']->setPicture($picture);
		print "<img src='".$link."' />";
		break;
		
	case "setAutoPic":
		$link = str_replace("_icon_","",$_GET['icon']);
		$name = str_replace($GLOBALS['DIRNAMES']['Sonds'],"",$link);
		$picture = new Picture();
		$picture->setName($name);
		$_SESSION['currentPoll']->setPicture($picture);
		print "<img src='".$link."' />";
		//addLog("Choice: ".$_SESSION['currentPoll']->getPicture()->getLink());
		break;
		
	case "loadVideo":
		$link = sqlInput($_GET['link']);
		if ( preg_match("#http://www\.youtube\.com/watch\?v=(.+)&?#i",$link,$id) )
		{
			$link = "http://www.youtube.com/embed/".$id[1];
		}
		$video = new Video($link);
		$_SESSION['currentPoll']->setVideo($video);
		print "<iframe style='width: 282px; height: 212px; overflow: hidden; border: 0px;' scrolling='no' src='".$link."'></iframe>";
		break;
		
	case "loadDefaultImg":
		$dont = 0;
		if (is_object($_SESSION['currentPoll']->getPicture()))
		{
			if ( $_SESSION['currentPoll']->getPicture()->getLink() != NULL )
			{
				$dont = 1;
			}	
		}
		//addLog("TextField: ".$_SESSION['currentPoll']->getPicture()->getLink());
		if ( $dont == 0 )
		{
			$picture = new Picture();
			$picture->loadDefaultPictures($_GET['keywords']);
			$link = $picture->getDefault();
			$picture->loadParameters();
			$picture->setExternal();
			$_SESSION['currentPoll']->setPicture($picture);
		}
		else
		{
			$link = $_SESSION['currentPoll']->getPicture()->getLink();	
			$width = $_SESSION['currentPoll']->getPicture()->getWidth();
			$height = $_SESSION['currentPoll']->getPicture()->getHeight();
			$marginLeft = $_SESSION['currentPoll']->getPicture()->getMarginLeft();
			$marginTop = $_SESSION['currentPoll']->getPicture()->getMarginTop();
		}
		print "<img src='".$link."' style='width: ".$width."px; height: ".$height."px; margin-left: ".$marginLeft."px; margin-top: ".$marginTop."px;' />";
		break;	
		
	case "setDefaultImg":
		$picture = new Picture();
		$picture->loadAttributes($_SESSION['samplePictures'][$_GET['i']]);
		$picture->setType('picture');
		$picture->loadParameters();
		$width = $picture->getWidth();
		$height = $picture->getHeight();
		$marginLeft = $picture->getMarginLeft();
		$marginTop = $picture->getMarginTop();
		$picture->setExternal();
		$link = $picture->getLink();
		$_SESSION['currentPoll']->setPicture($picture);
		print "<img src='".$link."' style='width: ".$width."px; height: ".$height."px; margin-left: ".$marginLeft."px; margin-top: ".$marginTop."px;' />";
		break;	

	case "loadSamplePictures":
				
		if ( $_GET['i'] == 0 )
		{
			$_SESSION['samplePictures'] = Picture::loadSamplePictures($_GET['keywords']);
		}
		for ( $j=0; $j<=$_GET['i']; $j++ )
		{
			$picture = new Picture();
			$picture->loadAttributes($_SESSION['samplePictures'][$j]);
			$picture->setType('icon');
			$picture->loadParameters();
			$width = $picture->getWidth();
			$height = $picture->getHeight();
			$marginLeft = $picture->getMarginLeft();
			$marginTop = $picture->getMarginTop();
			$html .= "<div class='icon' onclick='javascript:setDefaultImg(".$j.");showHide(&quot;pictureBox&quot;);showHide(&quot;dialogBackground&quot;);'><img src='".$_SESSION['samplePictures'][$j]."' style='width: ".$width."px; height: ".$height."px; margin-left: ".$marginLeft."px; margin-top: ".$marginTop."px;'  /></div>";
		}
		print $html;
		break;	

	case "setLanguage":
		$_SESSION['user']->changeLanguage($_GET['language']);
		break;
	case "changeMode":
		$_SESSION['user']->changeMode($_GET['mode']);
		break;
	case "putPoftd":
		$sql = 'UPDATE '.$GLOBALS['MYSQL_TABLES']['Sond'].'  SET daySond = :zero WHERE ((:today - daySond) < 86400) ;';
		$sql = $sql.'UPDATE '.$GLOBALS['MYSQL_TABLES']['Sond'].'  SET daySond = :time WHERE id = :id;';
		global $db;
		$req = $db->prepare($sql);
		$req->execute(array("zero"=>0,"today"=>time(),"time"=>time(),"id"=>(int)$_GET['id']));
		break;
		
	case "loadMoreNewsfeed":
		$step = $_GET['step'];
		( !empty($_GET['nickname']) && isset($_GET['nickname']) && $_GET['nickname'] != "null" ) ?	$nickname = $_GET['nickname'] : $nickname = NULL;
		include("newsfeed.php");
		
		break;
	case "loadMoreTimeLine":
		$step = $_GET['step'];
		( !empty($_GET['nickname']) && isset($_GET['nickname']) && $_GET['nickname'] != "null" ) ?	$nickname = $_GET['nickname'] : $nickname = NULL;
		if ( isset($this) )
		{
			$TBS = $this;
		}
		else
		{
			include_once('TEMPLATE/tbs_class_php5.php');
			$TBS = new clsTinyButStrong;
		}

		( !isset($nickname) || empty($nickname) ) ? $nickname = NULL : NULL;
		( !isset($step) || empty($step) ) ? $step = 1 : NULL;
		$TBS->LoadTemplate('TEMPLATE/timeline.htm');
		$ar_newsfeed=getNewsfeed($nickname,$step);
		$TBS->MergeBlock('ar_newsfeed','array',$ar_newsfeed);
		$TBS->MergeField('count_newsfeed',count($ar_newsfeed));
		$TBS->Show();
		
		break;
	case "follow":
		$_SESSION['userIn']->setFollow($_GET['userIn_id']);
		print "<div class='btn_middle' onclick='javascript:unfollow(".$_GET['userIn_id'].");'>";
	  	print $GLOBALS['DICTIONARY']['myAccount']['stopFollowing'];
		print "</div>";
		break;
	case "followSug":
		$_SESSION['userIn']->setFollow($_GET['userIn_id']);
		print "<div class='buttonFollowSug' onclick='javascript:unfollowSuggestion(".$_GET['userIn_id'].");'>";
		print $GLOBALS['DICTIONARY']['myAccount']['stopFollowing'];
		print "</div>";
		break;
	case "unfollow":
		$_SESSION['userIn']->unFollow($_GET['userIn_id']);
		print "<div class='btn_middle' onclick='javascript:follow(".$_GET['userIn_id'].");'>";
	  	print $GLOBALS['DICTIONARY']['myAccount']['follow'];
		print "</div>";		
		
		break;
	case "unfollowSug":
		$_SESSION['userIn']->unFollow($_GET['userIn_id']);
		print "<div class='buttonFollowSug' onclick='javascript:followSuggestion(".$_GET['userIn_id'].");'>";
		print $GLOBALS['DICTIONARY']['myAccount']['follow'];
		print "</div>";

		break;
	case "getPage":
		global $db;
		$showTri=1;
		$ar_sonds = array();
		//Partie NOMBRE DE PAGE
		$sqlNum="SELECT count(*) as num FROM arch_sond sond,arch_poll p,arch_pollactivity pola WHERE sond.id=p.sond_id AND pola.poll_id=p.sond_id AND pola.activity_id= ? AND sond.language = ? and pola.super_activity_id=?";
		//a rajouter and not in ar_seen
		$reqNum = $db->prepare($sqlNum);
		$reqNum->execute(array($_GET['act_id'],$_SESSION['user']->getLanguage(),$_SESSION['user']->getMode()));
		while($donnee=$reqNum->fetch())
		{
			//nombre de résultats total
			$numResultat=$donnee['num'];
		}
		$numPageNeeded=$numResultat/NBR_POLL_PAGE;
		if($numResultat%NBR_POLL_PAGE!=0)
		{
			$numPageNeeded++;
		}
		$ar_pages = array();
		$num=$_GET['num'];
		if(($num==0 ||$num==1 || $num==2 || $num==3) && $numPageNeeded>=5)
		{
			for($i=1;$i<=5;$i++)
			{
				array_push($ar_pages,$i);
			}
		}
		else if(($num==1 || $num==2 || $num==3) && $numPageNeeded<5)
		{
			for($i=1;$i<=$numPageNeeded;$i++)
			{
			array_push($ar_pages,$i);
			}
		}
		else if($num>3 && ($numPageNeeded>=($num+2)))
		{
			for($i=($num-2);$i<=($num+2);$i++)
			{
				array_push($ar_pages,$i);
			}
		}
		else if($num>3)
		{
			for($i=($num-2);$i<=$numPageNeeded;$i++)
			{
				array_push($ar_pages,$i);
			}
		}
		//A continuer
		//Partie sondages
		$num=16*($num-1);
		if(($num+16)>$numResultat)
		{
			$borneSup=$numResultat;
		}
		else
		{
			$borneSup=$num+16;
		}
		$sql = "SELECT sond.numVotes,sond.datum,p.sond_id,sond.title,sond.userin_nickname FROM arch_poll p,arch_pollactivity pola,arch_sond sond WHERE sond.id=p.sond_id AND pola.poll_id=p.sond_id and pola.activity_id = ? AND sond.language= ?";
	 	if(!empty($_GET["tri"]))
	 	{
	 		$tri=0;
	 		switch($_GET["tri"])
	 		{
	 			case date:
	 				$tri=1;
	 				$sql.=" ORDER BY datum DESC";
	 				break;
	 			case votes:
	 				$tri=2;
	 				$sql.=" ORDER BY numVotes DESC";
	 				break;
	 			case question:
	 				$tri=3;
	 				//Réecris ici car besoin de question
	 				$sql = "SELECT q.statement, sond.datum,p.sond_id,sond.title,sond.userin_nickname FROM arch_question q,arch_poll p,arch_pollactivity pola,arch_sond sond WHERE q.question_id=p.question_id AND sond.id=p.sond_id AND pola.poll_id=p.sond_id and pola.activity_id = ? AND sond.language= ?";
	 				$sql.=" ORDER BY q.statement ASC";
	 				break;
	 			case créateur:
	 				$tri=4;
	 				$sql.=" ORDER BY userin_nickname ASC";
	 				break;
	 			//a continuer
	 		}
	 	}
	 	$sql.= " LIMIT ".$num.", 16";
		//a rajouter and not in ar_seen
		//echo $numPageNeeded."<br/>";
		
		$req = $db->prepare($sql);
		$sqlArray=array(sqlInput($_GET['act_id']),sqlInput($_SESSION['user']->getLanguage()));
		$req->execute($sqlArray);

		$msgSearch = str_replace("%activity%",showCategory($_GET['act_id']),$GLOBALS['DICTIONARY']['SearchEngine']['resultActivity']);
		$datas = $req->fetchAll();
		foreach ($datas as $data)
		{
			$ar_sonds[]=array('sond_id'=>$data['sond_id']);
		}
		$ar_content=array();
		if(isset($ar_sonds) and $ar_sonds != NULL)
		{
			for($i = 0; $i < NBR_POLL_PAGE; $i++)
			{
				$temp = new Sond();
				if(isset($ar_sonds[$i]))
				{
					$temp->loadAttributes($ar_sonds[$i]['sond_id']);
					array_push($ar_content,new Poll($temp));
				}else
				{
					break;
				}
				$msgBox = 0;
				$msg = "";
				$searchBox=1;
			}
		}
		else
		{
			$ar_content = Poll::auxiliary(9);
			$msgBox = 1;
			$searchBox=0;
			$msg = $GLOBALS['DICTIONARY']['SearchEngine']['noResult'];
			$showTri=0;
			
		}

		unset($_SESSION['currentPoll']);
		if ( isset($this) )
		{
			$TBS = $this;
		}
		else
		{
			include_once('TEMPLATE/tbs_class_php5.php');
			$TBS = new clsTinyButStrong;
		}
		$next=$GLOBALS['DICTIONARY']['SearchEngine']['next'];
		$prev=$GLOBALS['DICTIONARY']['SearchEngine']['prec'];
		$ar_tri=array("d"=>$GLOBALS['DICTIONARY']['SearchEngine']['datum'],"v"=>$GLOBALS['DICTIONARY']['SearchEngine']['rate'],"a"=>$GLOBALS['DICTIONARY']['SearchEngine']['question'],"c"=>$GLOBALS['DICTIONARY']['SearchEngine']['autor']);
		$msgTot = str_replace("%borneInf%",($num+1),$GLOBALS['DICTIONARY']['SearchEngine']['numResultsActivity']);
		$msgTot = str_replace("%borneSup%",$borneSup,$msgTot);
		$msgTot = str_replace("%numTot%",$numResultat,$msgTot);
		$msgTri=$GLOBALS['DICTIONARY']['SearchEngine']['tri'];
		
		
		$TBS->LoadTemplate('TEMPLATE/home.htm');
		$TBS->MergeField('msgBox',$msgBox);
		$TBS->MergeField('msg',$msg);
		$TBS->MergeField('msgTri',$msgTri);
		
		$TBS->MergeField('searchBox',$searchBox);
		$TBS->MergeField('msgSearch',$msgSearch);
		$TBS->MergeField('numberInter',$numberInter);
		$TBS->MergeField('page',1);
		$TBS->MergeField('next',$next);
		$TBS->MergeField('id',$_GET['act_id']);
		$TBS->MergeField('type',1);
		$TBS->MergeField('showTri',$showTri);
		$TBS->MergeField('next',$next);
		$TBS->MergeField('prec',$prev);
		$TBS->MergeField('numPage',$_GET['num']);
		$TBS->MergeField('pagePrec',$_GET['num']-1);
		$TBS->MergeField('pageSuiv',$_GET['num']+1);
		
		$TBS->MergeField('msgTot',$msgTot);
		$TBS->MergeField('numTot',$numResultat);
		$TBS->MergeField('borneInf',$num+1);
		$TBS->MergeField('borneSup',$borneSup);
		
		$TBS->MergeField('typeTri',$tri);		
		
		$TBS->MergeBlock('ar_tri','array',$ar_tri);
		
		$TBS->MergeBlock('ar_pages','array',$ar_pages);
		$TBS->MergeBlock('ar_content','array',$ar_content);
		//$TBS->MergeField('value',$ar_pages[4]);
		$TBS->MergeBlock('ar_tri',$ar_tri);



		$TBS->Show();
		break;
	case showFollow:
		global $db;
		$id=$_GET['id'];
		$type=$_GET['type'];
		$total=$_GET['total'];
		if($type==1)
		{
			$follow=$GLOBALS['DICTIONARY']['follow']['followed'];
				
			$str="SELECT follower as f FROM arch_following WHERE followed=? LIMIT 0,18";
		}
		else if($type==2)
		{
			$follow=$GLOBALS['DICTIONARY']['follow']['following'];
			$str="SELECT followed as f FROM arch_following WHERE follower=? LIMIT 0,18";
			
		}
		if(isset($_SESSION['userIn']) && !empty($_SESSION['userIn']))
		{
			$req=$db->prepare($str);
			$req->execute(array($id));
			$ar_follow=array();
			while($rep=$req->fetch())
			{
				$str2="SELECT * FROM arch_userin WHERE id=?";
				$req2=$db->prepare($str2);
				$req2->execute(array($rep['f']));
				while($rep2=$req2->fetch())
				{
					/*$user = new UserIn();
					 $user->loadAttributes($rep2['id']);*/
					if($rep2['Facebook']=='1')
					{
						$picture=new Picture($rep2['avatar'],'icon',true);
					}
					else
					{
						$picture=new Picture($rep2['avatar'],'icon');
					}
					$ar_follow[]=array('id'=>$rep2['id'],'nickname'=>$rep2['nickname'],'avatar'=>$picture);
				}
			}
			/*foreach($ar_follow as $ar)
			 {
			echo "<div> <a href='?page=myAccount&amp;userId=".$ar['id']."'>".$ar['nickname']."</a></div>";
			}*/
			if(empty($ar_follow))
			{
				$showNoResults=1;
				$isResults=$GLOBALS['DICTIONARY']['follow']['nobody'];
			}
			else
			{
				$showNoResults=0;
				$isResults="";
			}
			$msgShowAll=$GLOBALS['DICTIONARY']['follow']['showAll'];
			$num=count($ar_follow);
		}
		else
		{
			$showNoResults=1;
			$ar_follow=array();
			$isResults=$GLOBALS['DICTIONARY']['follow']['connectToSee'];
			//$isResults="Connect or make an account to see who they are";
		}
		if ( isset($this) )
		{
			$TBS = $this;
		}
		else
		{
			include_once('TEMPLATE/tbs_class_php5.php');
			$TBS = new clsTinyButStrong;
		}
		
		$TBS->LoadTemplate('TEMPLATE/showFollow.htm');
		$TBS->MergeField('pictured',1);
		$TBS->MergeField('type',$type);
		$TBS->MergeField('userId',$id);
		$TBS->MergeField('numDecoupe',6);
		$TBS->MergeField('total',$total);
		
		$TBS->MergeField('showAll',$msgShowAll);
		$TBS->MergeField('typeFollow',$follow);
		$TBS->MergeField('isResults',$isResults);
		$TBS->MergeField('showNoResults',$showNoResults);
		
		$TBS->MergeBlock('ar_follow','array',$ar_follow);
		$TBS->Show();
		break;
		
	case "toggleAnonyme":
		($_SESSION['MODE_ANONYME'] === true) ? $_SESSION['MODE_ANONYME'] = false : $_SESSION['MODE_ANONYME'] = true;
		include("mode_anonyme.php");
		break;
		
	case "loadElemTimeline":
		include("elemTimeline.php");
		break;
	case "morePeopleSuggestion":
		include("suggestionUser.php");
		break;
	case "moreFollow":
		include("follow.php");
		break;
}
?>
